import Foundation

// #1
func isPalindrome(string: String) -> Bool {
    var controlString = ""
    
    for character in string {
        controlString = String(character) + controlString
    }
    
    if controlString == string {
        return true
    } else {
        return false
    }
}

print(isPalindrome(string: "RADAR"))
print("----------------------------")

// #2
func countArrayElement<T: Hashable>(array: [T]) {
    
    var elementCounts = [T: Int]()
    
    for element in array {
        elementCounts[element] = (elementCounts[element] ?? 0) + 1
    }
    
    for element in elementCounts {
        print("\(element.key): \(element.value) times")
    }
}

countArrayElement(array: ["red", "red", "yellow", "blue", "green", "blue", "purple", "red"])
print("----------------------------")
countArrayElement(array: [1, 2, 3, 1, 5, 6, 7, 1, 8, 1, 2, 4, 2, 4, 5, 8, 7, 10])
print("----------------------------")


// #3
func createPyramid(numberOfFloor: Int) {
    
    var floorNumber = 1
    let nextFloor = "\n"
    var string = ""
    
    for _ in 1...numberOfFloor {
        string += String(repeating: "*", count: floorNumber) + nextFloor
        floorNumber += 1
    }
    print(string)
}

createPyramid(numberOfFloor: 5)
print("----------------------------")


// #4
func createCenterAlignedPyramid(numberOfFloor: Int) {
    
    var floorNumber = 1
    let nextFloor = "\n"
    var pyramid = ""
    
    for floor in 1...numberOfFloor {
        let space = String(repeating: " ", count: numberOfFloor - floor)
        let floorElement = String(repeating: "* ", count: floorNumber) + nextFloor
        pyramid += space + floorElement
        floorNumber += 1
    }
    print(pyramid)
}

createCenterAlignedPyramid(numberOfFloor: 5)
print("----------------------------")


// projecteuler problem 1
// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.

func sumOfMultiples(below: Int) -> Int {
    var sum = 0
    
    for number in 1..<below {
        if number % 3 == 0 || number % 5 == 0 {
            sum += number
        }
    }
    return sum
}

print(sumOfMultiples(below: 1000))
print("----------------------------")

// projecteuler problem 2
// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

func fibonacciEvenSum(below: Int) -> Int {
    var sum = 2
    var fibonacciArray = [1, 2]
    
    for _ in 0...Int.max {
        let newNumber = fibonacciArray[fibonacciArray.count-1]+fibonacciArray[fibonacciArray.count-2]
        if newNumber < below {
            fibonacciArray.append(newNumber)
            if newNumber % 2 == 0 {
                sum += newNumber
            }
        } else {
            break
        }
    }
    
    return sum
}

print(fibonacciEvenSum(below: 4000000))
print("----------------------------")

// projecteuler problem 3
// The prime factors of 13195 are 5, 7, 13 and 29. What is the largest prime factor of the number 600851475143 ?


func primes(n: Int) -> [Int] {
    var numbers = [Int](2 ..< n)
    for i in 0..<n - 2 {
        let prime = numbers[i]
        guard prime > 0 else { continue }
        for multiple in stride(from: 2 * prime - 2, to: n - 2, by: prime){
            numbers[multiple] = 0
        }
    }
    return numbers.filter{ $0 > 0 }

}

func largestPrimeFactor(number: Int) -> Int{
    var largestNumber = 1
    var primeArray = primes(n: number)
    
    for prime in primeArray {
        if number % prime == 0 {
            largestNumber = prime
        }
    }
    
    return largestNumber
}

print(primes(n: 600851475143))



